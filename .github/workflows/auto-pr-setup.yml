name: Auto PR Setup
on:
  pull_request:
    types: [opened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Parse PR title and auto setup
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reviewersConfig = JSON.parse(fs.readFileSync('.github/config/reviewers.json', 'utf8'));

            const title = context.payload.pull_request.title;
            const regex = /\[web-front\]\[([^\]]+)\]\[([^\]]+)\]\[([^\]]+)\]/;
            const match = title.match(regex);

            if (match) {
              const issueNumbersString = match[1];
              const labelsString = match[2];
              const milestone = match[3];

              // IssueÁï™Âè∑„ÇíÈÖçÂàó„Å´Â§âÊèõÔºà„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßË§áÊï∞ÂØæÂøúÔºâ
              const issueNumbers = issueNumbersString.split(',').map(num => num.trim());
              const labels = labelsString.split(',').map(label => label.trim());
              const reviewers = reviewersConfig.reviewers || [];

              console.log(`üìã Parsed data:`, {
                issueNumbers,
                labels,
                milestone,
                reviewers
              });

              // 1. Set reviewers
              if (reviewers.length > 0) {
                try {
                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    reviewers: reviewers
                  });
                  console.log('‚úÖ Reviewers set successfully');
                } catch (error) {
                  console.log('‚ùå Failed to set reviewers:', error.message);
                }
              }

              // 2. Set assignee
              try {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  assignees: [context.payload.pull_request.user.login]
                });
                console.log('‚úÖ Assignee set successfully');
              } catch (error) {
                console.log('‚ùå Failed to set assignee:', error.message);
              }

              // 3. Set labels
              try {
                // Êó¢Â≠ò„ÅÆ„É©„Éô„É´‰∏ÄË¶ß„ÇíÂèñÂæó
                const { data: existingLabels } = await github.rest.issues.listLabelsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });

                const existingLabelNames = existingLabels.map(label => label.name);

                // Â≠òÂú®„Åô„Çã„É©„Éô„É´„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                const validLabels = labels.filter(label => {
                  const exists = existingLabelNames.includes(label);
                  if (!exists) {
                    console.log(`‚ö†Ô∏è Label not found (skipped): ${label}`);
                  }
                  return exists;
                });

                // Â≠òÂú®„Åô„Çã„É©„Éô„É´„ÅÆ„Åø„ÇíË®≠ÂÆö
                if (validLabels.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: validLabels
                  });
                  console.log(`‚úÖ Labels set successfully: ${validLabels.join(', ')}`);
                } else {
                  console.log('‚ö†Ô∏è No valid labels found');
                }
              } catch (error) {
                console.log('‚ùå Failed to set labels:', error.message);
              }

              // 4. Set milestone
              try {
                const milestones = await github.rest.issues.listMilestones({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                const milestoneObj = milestones.data.find(m => m.title === milestone);
                if (milestoneObj) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    milestone: milestoneObj.number
                  });
                  console.log('‚úÖ Milestone set successfully');
                } else {
                  console.log('‚ö†Ô∏è Milestone not found:', milestone);
                }
              } catch (error) {
                console.log('‚ùå Failed to set milestone:', error.message);
              }

              // 5. Link to issues (Ë§áÊï∞ÂØæÂøú)
              try {
                const body = context.payload.pull_request.body || '';

                // Êó¢„Å´„É™„É≥„ÇØ„Åï„Çå„Å¶„ÅÑ„ÇãIssueÁï™Âè∑„ÇíÁ¢∫Ë™ç
                const existingIssueLinks = [];
                issueNumbers.forEach(issueNum => {
                  if (body.includes(`#${issueNum}`)) {
                    existingIssueLinks.push(issueNum);
                  }
                });

                // „Åæ„Å†„É™„É≥„ÇØ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑIssueÁï™Âè∑„ÅÆ„Åø„ÇíËøΩÂä†
                const newIssueNumbers = issueNumbers.filter(issueNum =>
                  !existingIssueLinks.includes(issueNum)
                );

                if (newIssueNumbers.length > 0) {
                  const issueLinks = newIssueNumbers.map(issueNum => `#${issueNum}`).join(', ');
                  const newBody = body + `\n\nIssues ${issueLinks}`;

                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    body: newBody
                  });
                  console.log(`‚úÖ Issues linked successfully: ${issueLinks}`);
                } else {
                  console.log('‚ÑπÔ∏è All issues are already linked');
                }
              } catch (error) {
                console.log('‚ùå Failed to link issues:', error.message);
              }
            } else {
              console.log('‚ö†Ô∏è PR title does not match expected format');
            }
