name: Auto PR Setup
on:
  pull_request:
    types: [opened]

# 権限設定
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Parse PR title and auto setup
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request.title;

            /* PRタイトルから取得: [web-front][issue番号][ラベル（複数）][マイルストーン] - 作業内容 */

            const regex = /\[web-front\]\[(\d+)\]\[([^\]]+)\]\[([^\]]+)\]/;
            const match = title.match(regex);

            if (match) {
              const issueNumber = match[1];
              const labelsString = match[2];
              const milestone = match[3];

              // カンマ区切りでラベルを分割し、前後の空白を除去
              const labels = labelsString.split(',').map(label => label.trim());

              // 1. Set reviewers (固定3人)
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: ['tanakashin', 'yamashita', 'kawasaki']
              });

              // 2. Set assignee to PR author
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: [context.payload.pull_request.user.login]
              });

              // 3. Set labels (複数対応)
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });

              // 4. Set milestone (PRタイトルから取得)
              const milestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const milestoneObj = milestones.data.find(m => m.title === milestone);
              if (milestoneObj) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  milestone: milestoneObj.number
                });
              }

              // 5. Link to issue (Development)
              const body = context.payload.pull_request.body || '';
              if (!body.includes(`#${issueNumber}`)) {
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  body: body + `\n\nCloses #${issueNumber}`
                });
              }
            }
