name: Auto PR Setup
on:
  pull_request:
    types: [opened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Parse PR title and auto setup
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reviewersConfig = JSON.parse(fs.readFileSync('.github/config/reviewers.json', 'utf8'));

            const title = context.payload.pull_request.title;
            const regex = /\[web-front\]\[(\d+)\]\[([^\]]+)\]\[([^\]]+)\]/;
            const match = title.match(regex);

            if (match) {
              const issueNumbersString = match[1];
              const labelsString = match[2];
              const milestone = match[3];

              // 複数対応: Issue番号、ラベル
              const issueNumbers = issueNumbersString.split(',').map(num => num.trim());
              const labels = labelsString.split(',').map(label => label.trim());
              const reviewers = reviewersConfig.reviewers || [];

              // 1. Set reviewers (エラーハンドリング付き)
              if (reviewers.length > 0) {
                try {
                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    reviewers: reviewers
                  });
                  console.log('✅ Reviewers set successfully');
                } catch (error) {
                  console.log('❌ Failed to set reviewers:', error.message);
                }
              }

              // 2. Set assignee (エラーハンドリング付き)
              try {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  assignees: [context.payload.pull_request.user.login]
                });
                console.log('✅ Assignee set successfully');
              } catch (error) {
                console.log('❌ Failed to set assignee:', error.message);
              }

              // 3. Set labels (存在確認付き)
              try {
                // 既存のラベル一覧を取得
                const { data: existingLabels } = await github.rest.issues.listLabelsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });

                const existingLabelNames = existingLabels.map(label => label.name);

                // 存在するラベルのみをフィルタリング
                const validLabels = labels.filter(label => {
                  const exists = existingLabelNames.includes(label);
                  if (!exists) {
                    console.log(`⚠️ Label not found (skipped): ${label}`);
                  }
                  return exists;
                });

                // 存在するラベルのみを設定
                if (validLabels.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: validLabels
                  });
                  console.log(`✅ Labels set successfully: ${validLabels.join(', ')}`);
                } else {
                  console.log('⚠️ No valid labels found');
                }
              } catch (error) {
                console.log('❌ Failed to set labels:', error.message);
              }

              // 4. Set milestone
              try {
                const milestones = await github.rest.issues.listMilestones({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                const milestoneObj = milestones.data.find(m => m.title === milestone);
                if (milestoneObj) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    milestone: milestoneObj.number
                  });
                  console.log('✅ Milestone set successfully');
                } else {
                  console.log('⚠️ Milestone not found:', milestone);
                }
              } catch (error) {
                console.log('❌ Failed to set milestone:', error.message);
              }

              // 5. Link to issues (複数Issue対応)
              try {
                const body = context.payload.pull_request.body || '';
                let updatedBody = body;

                // 各Issue番号をチェックして追加
                issueNumbers.forEach(issueNumber => {
                  if (!updatedBody.includes(`#${issueNumber}`)) {
                    updatedBody += `\nCloses #${issueNumber}`;
                  }
                });

                // 本文が変更された場合のみ更新
                if (updatedBody !== body) {
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    body: updatedBody
                  });
                  console.log(`✅ Issues linked successfully: ${issueNumbers.join(', ')}`);
                }
              } catch (error) {
                console.log('❌ Failed to link issues:', error.message);
              }
            }
